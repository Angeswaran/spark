package com.humira.constants

object EnvConstants {
  /*final val DATABASENAME1 = "RAW_DB"
  final val DATABASENAME2 = "Refinde_DB"*/
  /*  final val STGTBLLOCATION = "StgTblLocation"
  final val MASTERSCHEMA = "MasterSchema"
  final val AUDITFILEBASEPATH = "AuditFileBasePath"
  final val DRIVERCOPYLANDINGTORAW = "CopyLandingToRaw"*/
  /*final val MASTERSCHEMAPATH = "MasterSchemaPath"
  final val DETAILEDCONTROLTABLEDB = "DetailedControlTableDB"
  final val DETAILEDCONTROLTABLENAME = "DetailedControlTableName"*/
  /* final val FILELISTCURRENTABSOLUTEPATH = "FileListCurrentAbsolutePath"*/
  /*final val LANDINGBASEPATH = "LandingBasePath"*/
  /*final val LINEAGEFILEABSOLUTEPATH = "LineageFileAbsolutePath"*/
  /* final val RAWBASEPATH = "RawBasePath"*/
  /* final val DELIMITERSOURCE = "FileDelimiter"*/
  /*final val refinedBasepath="RefinedBasePath"*/
  /*   final val FILENAMEPATTERNREFFILE = "FILENAMEPATTERNREFFILE"*/
  final val DATEFORMAT = "DateFormat"
  final val DateRange1 = "StartDateRange"
  final val DateRange2 = "EndDateRange"
  final val DATABASENAME1 = "RAW_DB"
  final val DATABASENAME2 = "Refined_DB"
  final val DATABASENAME3 = "Schema_DB"
  final val DATABASENAME4 = "Audit_DB"
  final val STGTBLLOCATION = "StgTblLocation"
  final val MASTERSCHEMA = "MasterSchema"
  final val AUDITFILEBASEPATH = "AuditFileBasePath"
  final val DRIVERCOPYLANDINGTORAW = "CopyLandingToRaw"
  final val MASTERSCHEMAPATH = "MasterSchemaPath"
  final val DETAILEDCONTROLTABLEDB = "DetailedControlTableDB"
  final val DETAILEDCONTROLTABLENAME = "DetailedControlTableName"
  final val LANDINGBASEPATH = "LandingBasePath"
  final val LINEAGEFILEABSOLUTEPATH = "LineageFileAbsolutePath"
  final val RAWBASEPATH = "RawBasePath"
  final val PREREFINEDBASEPATH = "PreRefinedBasePath" //to handle Approval Logic
  final val REFINEDBASEPATH = "RefinedBasePath"
  final val FILENAMEPATTERNREFFILE = "FILENAMEPATTERNREFFILE"
  final val CREATEAUDITTABLE_RAW = "CreateDetailAuditTable"
  final val MARKETCODE = "MARKETCODE"
  final val DATASET = "DataSet"
  final val VENDOR = "Vendor"
  final val HISTORYFILE = "HistoryFile"
  final val STRINGCHANGEDSCHEMAPATH = "stringChangedSchema"
  final val ACTUALCHANGEDSCHEMAPATH = "actualChangedSchema"
  final val SCHEMACHANGETRACKERPATH = "SchemaChangeTracker"
  final val SCHEMAREMOVALTRACKERPATH = "SchemaRemovalTracker"
  final val DATEFORMAT1 = "DateFormat1"
  final val CONTAINSMULTILINE = "ContainsMultiLine"

  final val ENCTEMPPATH = "EncTempPath"
  final val ENCRYPTIONFLAG = "EncryptionFlag"
  final val PSEUDODMAPPATH = "PsuedoIdMapPath"
  final val ENCRYPTIONCOLUMN = "EncryptionColumn"
  final val ENCRYPTIONXREFTABLE = "EncryptionXrefTable"
  final val ENCRYPTIONXREFPATH = "EncryptionXrefPath"
  final val ACTUALCOUNTBASELOCATION = "ActualCountBaseLocation"
  final val CREATEPSEUDOIDMAPTABLE = "CreatePseudoIdMapTable"
  final val PSEUDOMAPTBLMSCK = "PseudoMapTblMSCKRepair"
  final val PSEUDOMAPDBCREATION = "PseudoMapDBCreation"
  final val PSEUDOIDMAPTABLE = "PseudoIdMapTable"
  final val PSEUDOIDMAPLOC = "PseudoIdMapLocation"
  final val MetricsBASEPATH = "MetricsBASEPATH"
  final val CreateIndivIdMapView = "CreateIndivIDMapView"
  final val IndivIdMapView = "IndivIdMapView"
  final val CreatePateintIdMapView = "CreatePatientIdMapView"
  final val PateintIdMapView = "PateintIdMapView"
  final val RAWBASEPATHACTIVITY = "hdfsDestPathActivity"
  final val RAWBASEPATHCLICK = "hdfsDestPathClick"
  final val RAWBASEPATHIMPRESSION = "hdfsDestPathImpression"
  final val RAWBASEPATHLIVESTREAM = "hdfsDestPathLiveStream"
  final val RAWBASEPATHREFORMATTED = "hdfsDestPathReformatted"
  final val RAWBASEPATHACTIVITYCATS = "hdfsDestPathActivityCats"
  final val RAWBASEPATHACTIVITYTYPES = "hdfsDestPathActivityTypes"
  final val RAWBASEPATHADPLACEMENTASSIGNMENTS = "hdfsDestPathAdPlacementAssignments"
  final val RAWBASEPATHADS = "hdfsDestPathAds"
  final val RAWBASEPATHADVERTISERS = "hdfsDestPathAdvertisers"
  final val RAWBASEPATHBROWSERS = "hdfsDestPathBrowsers"
  final val RAWBASEPATHCAMPAIGNS = "hdfsDestPathCampaigns"
  final val RAWBASEPATHCITIES = "hdfsDestPathCities"
  final val RAWBASEPATHCREATIVEADASSIGNMENTS = "hdfsDestPathCreativeAdAssignments"
  final val RAWBASEPATHCREATIVES = "hdfsDestPathCreatives"
  final val RAWBASEPATHCUSTOMCREATIVEFIELDS = "hdfsDestPathCustomCreativeFields"
  final val RAWBASEPATHCUSTOMFLOODLIGHTVARIABLES = "hdfsDestPathCustomFloodlightVariables"
  final val RAWBASEPATHCUSTOMRICHMEDIA = "hdfsDestPathCustomRichMedia"
  final val RAWBASEPATHDESIGNATEDMARKETAREAS = "hdfsDestPathDesignatedMarketAreas"
  final val RAWBASEPATHKEYWORDVALUE = "hdfsDestPathKeywordValue"
  final val RAWBASEPATHOPERATINGSYSTEMS = "hdfsDestPathOperatingSystems"
  final val RAWBASEPATHPAIDSEARCH = "hdfsDestPathPaidSearch"
  final val RAWBASEPATHPLACEMENTCOST = "hdfsDestPathPlacementCost"
  final val RAWBASEPATHPLACEMENTS = "hdfsDestPathPlacements"
  final val RAWBASEPATHSITES = "hdfsDestPathSites"
  final val RAWBASEPATHSTATES = "hdfsDestPathStates"

  //DQM Metric Table details
  final val DQMDB = "DQM.hiveVar1"
  final val DQMTBL = "DQM.hiveVar2"
  final val DQMTBLSCHEMA = "DQM.hiveVar3"
  final val DQMTBLLOCATION = "DQM.hiveVar4"
  final val DQMCREATEDB = "DQM.QUERY1"
  final val DQMCREATETBL = "DQM.QUERY2"

  final val REMOVEQUOTES = "RemoveQuotes"
  final val PARTITIONEDDATA = "isDataPartitioned"
  final val PARTITIONNAME = "PartitionName"
  
  final val DataIngestionConstantsFile = "DataIngestionConstantsFile"
  final val ISCOLUMNREPLACED = "isColumnReplaced"
  final val ISDATALAKEID = "isDatalakeID"
  final val BRAND = "Brand"
  final val DEIDENTIFICATIONTABLE = "deidentificationtable"
  final val ZIPCODEPOPTABLE = "zipCodePopulationTable"
  final val LOADNULLASGOOD = "loadNullAsGood"

}